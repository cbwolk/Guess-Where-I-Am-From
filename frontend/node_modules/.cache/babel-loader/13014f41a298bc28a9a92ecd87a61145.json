{"ast":null,"code":"import _classCallCheck from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/aidan/Desktop/COMP20 Group Project/frontend/src/ResultsMap.js\";\nimport React, { Component } from 'react';\nimport { Map, GoogleApiWrapper, Polygon } from 'google-maps-react';\nimport Borders from './StateBorders.js';\nexport var MapContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapContainer, _Component);\n\n  function MapContainer(props) {\n    var _this;\n\n    _classCallCheck(this, MapContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapContainer).call(this, props));\n    _this.state = {\n      guess: _this.props.guess,\n      polygons: []\n    };\n    _this.adjustedGuess = _this.adjustedGuess.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MapContainer, [{\n    key: \"adjustedGuess\",\n    value: function adjustedGuess(guess) {\n      var max = 0;\n      Object.keys(guess).forEach(function (key) {\n        max = Math.max(max, guess[key]);\n      });\n      var adjusted = {};\n      Object.keys(guess).forEach(function (key) {\n        adjusted[key] = guess[key] / max;\n      });\n      return adjusted;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var polygons = [];\n      var adjusted = this.adjustedGuess(this.props.guess);\n      Object.keys(Borders).forEach(function (key) {\n        var weight = adjusted[key];\n        var coords = Borders[key].Coordinates;\n        var color = 100 - Math.round(weight * 100);\n        var colorStr = 'hsl(' + color + ', 100%, 50%)';\n        polygons.push(React.createElement(Polygon, {\n          key: key,\n          paths: coords,\n          strokeColor: \"#fff\",\n          strokeOpacity: 0.8,\n          strokeWeight: 0,\n          fillColor: colorStr,\n          fillOpacity: 0.5,\n          onClick: function onClick() {// curious about state \"key\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }));\n      });\n      var mapStyles = [{\n        \"featureType\": \"all\",\n        \"elementType\": \"labels.text\",\n        \"stylers\": [{\n          \"visibility\": \"off\"\n        }]\n      }, {\n        \"featureType\": \"all\",\n        \"elementType\": \"labels.icon\",\n        \"stylers\": [{\n          \"visibility\": \"off\"\n        }]\n      }];\n      var defaultMapOptions = {\n        styles: mapStyles\n      };\n      return React.createElement(\"div\", {\n        style: {\n          position: 'fixed',\n          top: '0',\n          left: '0',\n          width: '100%',\n          height: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Map, {\n        google: this.props.google,\n        style: {\n          width: '100%',\n          height: '100%',\n          position: 'fixed'\n        },\n        className: 'map',\n        zoom: 3,\n        defaultOptions: defaultMapOptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, polygons));\n    }\n  }]);\n\n  return MapContainer;\n}(Component);\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyAVQ-sy1G7aUQWxuTZjNsW0I6IBzcNocmQ'\n})(MapContainer);","map":{"version":3,"sources":["/Users/aidan/Desktop/COMP20 Group Project/frontend/src/ResultsMap.js"],"names":["React","Component","Map","GoogleApiWrapper","Polygon","Borders","MapContainer","props","state","guess","polygons","adjustedGuess","bind","max","Object","keys","forEach","key","Math","adjusted","weight","coords","Coordinates","color","round","colorStr","push","mapStyles","defaultMapOptions","styles","position","top","left","width","height","google","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Map, GoogleApiWrapper, Polygon} from 'google-maps-react';\nimport Borders from './StateBorders.js';\n\nexport class MapContainer extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            guess: this.props.guess,\n            polygons: []\n        }\n        this.adjustedGuess = this.adjustedGuess.bind(this);\n    }\n\n\n    adjustedGuess(guess) {\n        let max = 0;\n        Object.keys(guess).forEach(function(key){\n            max = Math.max(max, guess[key]);\n        });\n        let adjusted = {};\n        Object.keys(guess).forEach(function(key){\n            adjusted[key] = guess[key] / max;\n        });\n        return adjusted;\n    }\n\n    render() {\n        let polygons = [];\n\n        let adjusted = this.adjustedGuess(this.props.guess);\n        Object.keys(Borders).forEach(function(key){\n            let weight = adjusted[key];\n            let coords = Borders[key].Coordinates;\n            let color = 100 - Math.round(weight * 100);\n            let colorStr = 'hsl(' + color + ', 100%, 50%)';\n            polygons.push(\n                <Polygon\n                    key={key}\n                    paths={coords}\n                    strokeColor=\"#fff\"\n                    strokeOpacity={0.8}\n                    strokeWeight={0}\n                    fillColor={colorStr}\n                    fillOpacity={0.5}\n                    onClick={() => {\n                        // curious about state \"key\"\n                    }}\n                />\n            )\n        });\n\n        let mapStyles = [\n            {\n                \"featureType\": \"all\",\n                \"elementType\": \"labels.text\",\n                \"stylers\": [\n                    {\n                        \"visibility\": \"off\"\n                    }\n                ]\n            },\n            {\n                \"featureType\": \"all\",\n                \"elementType\": \"labels.icon\",\n                \"stylers\": [\n                    {\n                        \"visibility\": \"off\"\n                    }\n                ]\n            }\n        ]\n\n        const defaultMapOptions = {\n          styles: mapStyles\n        };\n\n        return(\n            <div\n                style={{\n                    position: 'fixed',\n                    top: '0',\n                    left: '0',\n                    width: '100%',\n                    height: '100%',\n                }}\n            >\n                <Map\n                    google={this.props.google}\n                    style={{\n                        width: '100%',\n                        height: '100%',\n                        position: 'fixed',\n                    }}\n                    className={'map'}\n                    zoom={3}\n                    defaultOptions={defaultMapOptions}\n                >\n                    {polygons}\n                </Map>\n            </div>\n        )\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: 'AIzaSyAVQ-sy1G7aUQWxuTZjNsW0I6IBzcNocmQ'\n})(MapContainer)\n"]},"metadata":{},"sourceType":"module"}