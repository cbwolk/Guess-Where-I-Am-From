{"ast":null,"code":"import _assertThisInitialized from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _toConsumableArray from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/aidan/Desktop/COMP20 Group Project/frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Map, Polyline, GoogleApiWrapper } from 'google-map-react';\n\nvar AnyReactComponent = function AnyReactComponent(_ref) {\n  var text = _ref.text;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, text);\n};\n\nvar SimpleMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SimpleMap, _Component);\n\n  function SimpleMap() {\n    _classCallCheck(this, SimpleMap);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SimpleMap).apply(this, arguments));\n  }\n\n  _createClass(SimpleMap, [{\n    key: \"render\",\n    value: function render() {\n      var triangleCoords = [{\n        lat: 25.774,\n        lng: -80.190\n      }, {\n        lat: 18.466,\n        lng: -66.118\n      }, {\n        lat: 32.321,\n        lng: -64.757\n      }, {\n        lat: 25.774,\n        lng: -80.190\n      }];\n      var defaultProps = {\n        center: {\n          lat: 59.95,\n          lng: 30.33\n        },\n        zoom: 11\n      };\n      return (// Important! Always set the container height explicitly\n        React.createElement(\"div\", {\n          style: {\n            height: '100vh',\n            width: '100%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, React.createElement(Map, {\n          bootstrapURLKeys: {\n            key: 'AIzaSyAVQ-sy1G7aUQWxuTZjNsW0I6IBzcNocmQ'\n          },\n          defaultCenter: this.props.center,\n          defaultZoom: this.props.zoom,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, React.createElement(Polyline, {\n          path: triangleCoords,\n          strokeColor: \"#0000FF\",\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        })))\n      );\n    }\n  }]);\n\n  return SimpleMap;\n}(Component);\n\nGoogleApiWrapper({\n  apiKey: 'AIzaSyAVQ-sy1G7aUQWxuTZjNsW0I6IBzcNocmQ'\n})(SimpleMap);\n\nvar Question =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(Question, _Component2);\n\n  function Question(props) {\n    var _this;\n\n    _classCallCheck(this, Question);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Question).call(this, props)); // Default all answers to false\n\n    var answers = [];\n\n    for (var i = 0; i < _this.props.options.length; i++) {\n      answers.push(false);\n    } // Set initial state\n\n\n    _this.state = {\n      answers: answers\n    };\n    return _this;\n  }\n\n  _createClass(Question, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var options = this.props.options.map(function (option, index) {\n        return React.createElement(\"label\", {\n          key: index,\n          className: \"CheckmarkLabel\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, \" \", option, React.createElement(\"input\", {\n          type: _this2.props.type,\n          name: _this2.props.id,\n          onChange: function onChange(e) {\n            // Update answers state\n            var answers = _toConsumableArray(_this2.state.answers);\n\n            answers[index] = e.target.checked;\n\n            _this2.setState({\n              answers: answers\n            }, function () {\n              _this2.props.onAnswerChange(_this2.props.id, _this2.state.answers);\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          className: \"Checkmark type-\" + _this2.props.type,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }));\n      });\n      return React.createElement(\"div\", {\n        className: \"QuestionContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, this.props.id + 1 + '. ' + this.props.question), React.createElement(\"div\", {\n        className: \"CheckboxContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, options));\n    }\n  }]);\n\n  return Question;\n}(Component);\n\nvar Questions =\n/*#__PURE__*/\nfunction (_Component3) {\n  _inherits(Questions, _Component3);\n\n  function Questions(props) {\n    var _this3;\n\n    _classCallCheck(this, Questions);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Questions).call(this, props));\n    _this3.state = {\n      questions: [],\n      answers: []\n    };\n    _this3.handleAnswerChange = _this3.handleAnswerChange.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    _this3.handleSubmit = _this3.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    return _this3;\n  }\n\n  _createClass(Questions, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this4 = this;\n\n      fetch(\"http://localhost:5000/get-questions\").then(function (res) {\n        return res.json();\n      }).then(function (questions) {\n        var answers = [];\n\n        for (var i = 0; i < questions.length; i++) {\n          var q = questions[i];\n          var arr = [];\n\n          for (var _i = 0; _i < q.options.length; _i++) {\n            arr.push(false);\n          }\n\n          answers.push(arr);\n        }\n\n        console.log(questions);\n\n        _this4.setState({\n          questions: questions,\n          answers: answers\n        });\n      });\n    } // Handle answer change by updating the state variable\n\n  }, {\n    key: \"handleAnswerChange\",\n    value: function handleAnswerChange(id, answers) {\n      var a = _toConsumableArray(this.state.answers);\n\n      a[id] = answers;\n      this.setState({\n        answers: a\n      });\n    } // Handle submit of all answers\n\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      // Send POST request to submit-answers route, which returns a guess\n      fetch(\"http://localhost:5000/submit-answers\", {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: \"POST\",\n        body: JSON.stringify(this.state.answers)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (guess) {\n        alert('Guess: ' + guess.state);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var questionEls = this.state.questions.map(function (question, index) {\n        return React.createElement(Question, {\n          id: index,\n          key: index,\n          question: question.question,\n          options: question.options,\n          type: question.type,\n          onAnswerChange: function onAnswerChange(id, answers) {\n            _this5.handleAnswerChange(id, answers);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: \"ContentWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ContentContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, questionEls, React.createElement(\"button\", {\n        onClick: function onClick() {\n          _this5.handleSubmit();\n        },\n        className: \"SubmitButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return Questions;\n}(Component);\n\nvar App =\n/*#__PURE__*/\nfunction (_Component4) {\n  _inherits(App, _Component4);\n\n  function App(props) {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(SimpleMap, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/aidan/Desktop/COMP20 Group Project/frontend/src/App.js"],"names":["React","Component","Map","Polyline","GoogleApiWrapper","AnyReactComponent","text","SimpleMap","triangleCoords","lat","lng","defaultProps","center","zoom","height","width","key","props","apiKey","Question","answers","i","options","length","push","state","map","option","index","type","id","e","target","checked","setState","onAnswerChange","question","Questions","questions","handleAnswerChange","bind","handleSubmit","fetch","then","res","json","q","arr","console","log","a","headers","method","body","JSON","stringify","guess","alert","questionEls","App"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Map, Polyline, GoogleApiWrapper } from 'google-map-react';\n\n\n\n\nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\n\nclass SimpleMap extends Component {\n\n  render() {\n\n    const triangleCoords = [\n        {lat: 25.774, lng: -80.190},\n        {lat: 18.466, lng: -66.118},\n        {lat: 32.321, lng: -64.757},\n        {lat: 25.774, lng: -80.190}\n    ];\n\n    const defaultProps = {\n        center: {\n            lat: 59.95,\n            lng: 30.33\n        },\n        zoom: 11\n    };\n\n    return (\n      // Important! Always set the container height explicitly\n      <div style={{ height: '100vh', width: '100%' }}>\n        <Map\n            bootstrapURLKeys={{ key: 'AIzaSyAVQ-sy1G7aUQWxuTZjNsW0I6IBzcNocmQ' }}\n            defaultCenter={this.props.center}\n            defaultZoom={this.props.zoom}\n        >\n            <Polyline\n                path={triangleCoords}\n                strokeColor=\"#0000FF\"\n                strokeOpacity={0.8}\n                strokeWeight={2}\n            />\n        </Map>\n      </div>\n    );\n  }\n}\n\nGoogleApiWrapper({\n  apiKey: ('AIzaSyAVQ-sy1G7aUQWxuTZjNsW0I6IBzcNocmQ')\n})(SimpleMap)\n\n\n\n\nclass Question extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // Default all answers to false\n        let answers = [];\n        for (let i = 0; i < this.props.options.length; i++) {\n            answers.push(false);\n        }\n\n        // Set initial state\n        this.state = {\n            answers: answers\n        }\n    }\n\n\n    render() {\n\n        const options = this.props.options.map((option, index) =>\n            <label\n                key={index}\n                className=\"CheckmarkLabel\"\n            > {option}\n                <input\n                    type={this.props.type}\n                    name={this.props.id}\n                    onChange={(e) => {\n                        // Update answers state\n                        let answers = [...this.state.answers];\n                        answers[index] = e.target.checked;\n                        this.setState({answers: answers}, () => {\n                            this.props.onAnswerChange(this.props.id, this.state.answers);\n                        });\n                    }}\n                ></input>\n                <span className={\"Checkmark type-\" + this.props.type}></span>\n            </label>\n        );\n\n        return (\n            <div className=\"QuestionContainer\">\n                <h1>{(this.props.id + 1) + '. ' +this.props.question}</h1>\n                <div className=\"CheckboxContainer\">\n                    {options}\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\nclass Questions extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            questions: [],\n            answers: [],\n        }\n\n        this.handleAnswerChange = this.handleAnswerChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentWillMount() {\n        fetch(\"http://localhost:5000/get-questions\")\n        .then(res => res.json())\n        .then(\n            (questions) => {\n                let answers = [];\n                for (let i = 0; i < questions.length; i++) {\n                    const q = questions[i];\n                    let arr = [];\n                    for (let i = 0; i < q.options.length; i++) {\n                        arr.push(false);\n                    }\n                    answers.push(arr);\n                }\n                console.log(questions);\n                this.setState({\n                    questions: questions,\n                    answers: answers,\n                });\n            }\n        );\n    }\n\n    // Handle answer change by updating the state variable\n    handleAnswerChange(id, answers) {\n        let a = [...this.state.answers];\n        a[id] = answers;\n        this.setState({\n            answers: a,\n        });\n    }\n\n    // Handle submit of all answers\n    handleSubmit() {\n        // Send POST request to submit-answers route, which returns a guess\n        fetch(\"http://localhost:5000/submit-answers\",\n        {\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            method: \"POST\",\n            body: JSON.stringify(this.state.answers)\n        })\n        .then(res => res.json())\n        .then(\n            (guess) => {\n                alert('Guess: ' + guess.state);\n            }\n        );\n    }\n\n    render() {\n\n        const questionEls = this.state.questions.map((question, index) =>\n            <Question\n                id={index}\n                key={index}\n                question={question.question}\n                options={question.options}\n                type={question.type}\n                onAnswerChange={(id, answers) => {\n                    this.handleAnswerChange(id, answers);\n                }}\n            />\n        );\n\n        return (\n            <div className=\"ContentWrapper\">\n                <div className=\"ContentContainer\">\n                    {questionEls}\n                    <button\n                        onClick={() => {\n                            this.handleSubmit();\n                        }}\n                        className=\"SubmitButton\">\n                        Submit\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                {/*<Questions />*/}\n                <SimpleMap />\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}