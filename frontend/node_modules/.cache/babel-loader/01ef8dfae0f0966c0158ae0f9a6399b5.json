{"ast":null,"code":"import _assertThisInitialized from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _toConsumableArray from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/aidan/Desktop/COMP20 Group Project/frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport ResultsMap from './ResultsMap.js';\n\nvar Question =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Question, _Component);\n\n  function Question(props) {\n    var _this;\n\n    _classCallCheck(this, Question);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Question).call(this, props)); // Default all answers to false\n\n    var answers = [];\n\n    for (var i = 0; i < _this.props.options.length; i++) {\n      answers.push(false);\n    } // Set initial state\n\n\n    _this.state = {\n      answers: answers\n    };\n    return _this;\n  }\n\n  _createClass(Question, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var options = this.props.options.map(function (option, index) {\n        return React.createElement(\"label\", {\n          key: index,\n          className: \"CheckmarkLabel\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, \" \", option, React.createElement(\"input\", {\n          type: _this2.props.type,\n          name: _this2.props.id,\n          onChange: function onChange(e) {\n            // Update answers state\n            var answers = _toConsumableArray(_this2.state.answers);\n\n            answers[index] = e.target.checked;\n\n            _this2.setState({\n              answers: answers\n            }, function () {\n              _this2.props.onAnswerChange(_this2.props.id, _this2.state.answers);\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          className: \"Checkmark type-\" + _this2.props.type,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }));\n      });\n      return React.createElement(\"div\", {\n        className: \"QuestionContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, this.props.id + 1 + '. ' + this.props.question), React.createElement(\"div\", {\n        className: \"CheckboxContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, options));\n    }\n  }]);\n\n  return Question;\n}(Component);\n\nvar Questions =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(Questions, _Component2);\n\n  function Questions(props) {\n    var _this3;\n\n    _classCallCheck(this, Questions);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Questions).call(this, props));\n    _this3.state = {\n      questions: [],\n      answers: []\n    };\n    _this3.handleAnswerChange = _this3.handleAnswerChange.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    _this3.handleSubmit = _this3.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    return _this3;\n  }\n\n  _createClass(Questions, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this4 = this;\n\n      fetch(\"http://localhost:5000/get-questions\").then(function (res) {\n        return res.json();\n      }).then(function (questions) {\n        var answers = [];\n\n        for (var i = 0; i < questions.length; i++) {\n          var q = questions[i];\n          var arr = [];\n\n          for (var _i = 0; _i < q.options.length; _i++) {\n            arr.push(false);\n          }\n\n          answers.push(arr);\n        }\n\n        console.log(questions);\n\n        _this4.setState({\n          questions: questions,\n          answers: answers\n        });\n      });\n    } // Handle answer change by updating the state variable\n\n  }, {\n    key: \"handleAnswerChange\",\n    value: function handleAnswerChange(id, answers) {\n      var a = _toConsumableArray(this.state.answers);\n\n      a[id] = answers;\n      this.setState({\n        answers: a\n      });\n      this.props.onAnswerChange(a);\n    } // Handle submit of all answers\n\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var _this5 = this;\n\n      // Send POST request to submit-answers route, which returns a guess\n      fetch(\"http://localhost:5000/submit-answers\", {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: \"POST\",\n        body: JSON.stringify(this.state.answers)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (guess) {\n        _this5.props.updateGuess(guess);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var questionEls = this.state.questions.map(function (question, index) {\n        return React.createElement(Question, {\n          id: index,\n          key: index,\n          question: question.question,\n          options: question.options,\n          type: question.type,\n          onAnswerChange: function onAnswerChange(id, answers) {\n            _this6.handleAnswerChange(id, answers);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: \"ContentWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ContentContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, questionEls, React.createElement(\"button\", {\n        onClick: function onClick() {\n          _this6.handleSubmit();\n        },\n        className: \"SubmitButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return Questions;\n}(Component);\n\nvar App =\n/*#__PURE__*/\nfunction (_Component3) {\n  _inherits(App, _Component3);\n\n  function App(props) {\n    var _this7;\n\n    _classCallCheck(this, App);\n\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this7.state = {\n      guess: undefined,\n      answers: undefined\n    };\n    _this7.map = React.createRef();\n    _this7.select = React.createRef();\n    return _this7;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this8 = this;\n\n      var states = [\"AK\", \"AL\", \"AR\", \"AS\", \"AZ\", \"CA\", \"CO\", \"CT\", \"DC\", \"DE\", \"FL\", \"GA\", \"GU\", \"HI\", \"IA\", \"ID\", \"IL\", \"IN\", \"KS\", \"KY\", \"LA\", \"MA\", \"MD\", \"ME\", \"MI\", \"MN\", \"MO\", \"MS\", \"MT\", \"NC\", \"ND\", \"NE\", \"NH\", \"NJ\", \"NM\", \"NV\", \"NY\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VA\", \"VI\", \"VT\", \"WA\", \"WI\", \"WV\", \"WY\"];\n      var options = states.map(function (state) {\n        return React.createElement(\"option\", {\n          value: state,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }, state);\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(Questions, {\n        updateGuess: function updateGuess(guess) {\n          console.log(guess);\n\n          _this8.setState({\n            guess: guess\n          });\n        },\n        onAnswerChange: function onAnswerChange(answers) {\n          _this8.setState({\n            answers: answers\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }), typeof this.state.guess !== 'undefined' && React.createElement(ResultsMap, {\n        ref: this.map,\n        guess: this.state.guess,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        onSubmit: function onSubmit(e) {\n          e.preventDefault();\n          console.log('submit');\n          console.log(_this8.select.current.value, _this8.state.answers); // Send POST request to submit-answers route, which returns a guess\n\n          fetch(\"http://localhost:5000/submit-answers\", {\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            method: \"POST\",\n            body: JSON.stringify(_this8.state.answers)\n          }).then(function (res) {\n            return res.json();\n          }).then(function (guess) {\n            _this8.props.updateGuess(guess);\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        ref: this.select,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, options), React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/aidan/Desktop/COMP20 Group Project/frontend/src/App.js"],"names":["React","Component","ResultsMap","Question","props","answers","i","options","length","push","state","map","option","index","type","id","e","target","checked","setState","onAnswerChange","question","Questions","questions","handleAnswerChange","bind","handleSubmit","fetch","then","res","json","q","arr","console","log","a","headers","method","body","JSON","stringify","guess","updateGuess","questionEls","App","undefined","createRef","select","states","preventDefault","current","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport ResultsMap from './ResultsMap.js';\n\n\n\n\n\n\nclass Question extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // Default all answers to false\n        let answers = [];\n        for (let i = 0; i < this.props.options.length; i++) {\n            answers.push(false);\n        }\n\n        // Set initial state\n        this.state = {\n            answers: answers\n        }\n    }\n\n\n    render() {\n\n        const options = this.props.options.map((option, index) =>\n            <label\n                key={index}\n                className=\"CheckmarkLabel\"\n            > {option}\n                <input\n                    type={this.props.type}\n                    name={this.props.id}\n                    onChange={(e) => {\n                        // Update answers state\n                        let answers = [...this.state.answers];\n                        answers[index] = e.target.checked;\n                        this.setState({answers: answers}, () => {\n                            this.props.onAnswerChange(this.props.id, this.state.answers);\n                        });\n                    }}\n                ></input>\n                <span className={\"Checkmark type-\" + this.props.type}></span>\n            </label>\n        );\n\n        return (\n            <div className=\"QuestionContainer\">\n                <h1>{(this.props.id + 1) + '. ' +this.props.question}</h1>\n                <div className=\"CheckboxContainer\">\n                    {options}\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\nclass Questions extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            questions: [],\n            answers: [],\n        }\n\n        this.handleAnswerChange = this.handleAnswerChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentWillMount() {\n        fetch(\"http://localhost:5000/get-questions\")\n        .then(res => res.json())\n        .then(\n            (questions) => {\n                let answers = [];\n                for (let i = 0; i < questions.length; i++) {\n                    const q = questions[i];\n                    let arr = [];\n                    for (let i = 0; i < q.options.length; i++) {\n                        arr.push(false);\n                    }\n                    answers.push(arr);\n                }\n                console.log(questions);\n                this.setState({\n                    questions: questions,\n                    answers: answers,\n                });\n            }\n        );\n    }\n\n    // Handle answer change by updating the state variable\n    handleAnswerChange(id, answers) {\n        let a = [...this.state.answers];\n        a[id] = answers;\n        this.setState({\n            answers: a,\n        });\n        this.props.onAnswerChange(a);\n    }\n\n    // Handle submit of all answers\n    handleSubmit() {\n        // Send POST request to submit-answers route, which returns a guess\n        fetch(\"http://localhost:5000/submit-answers\",\n        {\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            method: \"POST\",\n            body: JSON.stringify(this.state.answers)\n        })\n        .then(res => res.json())\n        .then(\n            (guess) => {\n                this.props.updateGuess(guess);\n            }\n        );\n    }\n\n    render() {\n\n        const questionEls = this.state.questions.map((question, index) =>\n            <Question\n                id={index}\n                key={index}\n                question={question.question}\n                options={question.options}\n                type={question.type}\n                onAnswerChange={(id, answers) => {\n                    this.handleAnswerChange(id, answers);\n                }}\n            />\n        );\n\n        return (\n            <div className=\"ContentWrapper\">\n                <div className=\"ContentContainer\">\n                    {questionEls}\n                    <button\n                        onClick={() => {\n                            this.handleSubmit();\n                        }}\n                        className=\"SubmitButton\">\n                        Submit\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            guess: undefined,\n            answers: undefined,\n        }\n        this.map = React.createRef();\n        this.select = React.createRef();\n    }\n\n    render() {\n\n        const states = [\"AK\", \"AL\", \"AR\", \"AS\", \"AZ\", \"CA\", \"CO\", \"CT\", \"DC\", \"DE\", \"FL\", \"GA\", \"GU\", \"HI\", \"IA\", \"ID\", \"IL\", \"IN\", \"KS\", \"KY\", \"LA\", \"MA\", \"MD\", \"ME\", \"MI\", \"MN\", \"MO\", \"MS\", \"MT\", \"NC\", \"ND\", \"NE\", \"NH\", \"NJ\", \"NM\", \"NV\", \"NY\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VA\", \"VI\", \"VT\", \"WA\", \"WI\", \"WV\", \"WY\"];\n\n        const options = states.map((state) =>\n            <option value={state}>{state}</option>\n        );\n\n        return (\n            <div>\n                <Questions\n                    updateGuess={(guess) => {\n                        console.log(guess);\n                        this.setState({guess: guess});\n                    }}\n                    onAnswerChange={(answers) => {\n                        this.setState({answers: answers})\n                    }}\n                />\n                {\n                    typeof this.state.guess !== 'undefined' &&\n                    <ResultsMap\n                        ref={this.map}\n                        guess={this.state.guess}\n                    />\n                }\n                <form\n                    onSubmit={(e) => {\n                        e.preventDefault();\n                        console.log('submit')\n                        console.log(this.select.current.value, this.state.answers);\n\n                        // Send POST request to submit-answers route, which returns a guess\n                        fetch(\"http://localhost:5000/submit-answers\",\n                        {\n                            headers: {\n                              'Accept': 'application/json',\n                              'Content-Type': 'application/json'\n                            },\n                            method: \"POST\",\n                            body: JSON.stringify(this.state.answers)\n                        })\n                        .then(res => res.json())\n                        .then(\n                            (guess) => {\n                                this.props.updateGuess(guess);\n                            }\n                        );\n\n                    }}\n                >\n                    <select\n                        ref={this.select}\n                    >\n                        {options}\n                    </select>\n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}