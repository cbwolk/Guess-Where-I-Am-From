{"ast":null,"code":"import _assertThisInitialized from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _toConsumableArray from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/aidan/Desktop/COMP20 Group Project/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/aidan/Desktop/COMP20 Group Project/frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport GoogleMapReact from 'google-map-react';\n\nvar AnyReactComponent = function AnyReactComponent(_ref) {\n  var text = _ref.text;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, text);\n};\n\nvar SimpleMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SimpleMap, _Component);\n\n  function SimpleMap() {\n    _classCallCheck(this, SimpleMap);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SimpleMap).apply(this, arguments));\n  }\n\n  _createClass(SimpleMap, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var polys = [];\n      var labels = []; // Display the map, with some controls and set the initial location\n\n      var map = new GMap2(document.getElementById(\"map\"));\n      map.addControl(new GLargeMapControl());\n      map.addControl(new GMapTypeControl());\n      map.setCenter(new GLatLng(42.16, -100.72), 4); // Read the data from states.xml\n\n      var request = GXmlHttp.create();\n      request.open(\"GET\", \"states.xml\", true);\n\n      request.onreadystatechange = function () {\n        if (request.readyState == 4) {\n          var xmlDoc = GXml.parse(request.responseText); // ========= Now process the polylines ===========\n\n          var states = xmlDoc.documentElement.getElementsByTagName(\"state\"); // read each line\n\n          for (var a = 0; a < states.length; a++) {\n            // get any state attributes\n            var label = states[a].getAttribute(\"name\");\n            var colour = states[a].getAttribute(\"colour\"); // read each point on that line\n\n            var points = states[a].getElementsByTagName(\"point\");\n            var pts = [];\n\n            for (var i = 0; i < points.length; i++) {\n              pts[i] = new GLatLng(parseFloat(points[i].getAttribute(\"lat\")), parseFloat(points[i].getAttribute(\"lng\")));\n            }\n\n            var poly = new GPolygon(pts, \"#000000\", 1, 1, colour, 0.5, {\n              clickable: false\n            });\n            polys.push(poly);\n            labels.push(label);\n            map.addOverlay(poly);\n          } // ================================================\n\n        }\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var triangleCoords = [{\n        lat: 25.774,\n        lng: -80.190\n      }, {\n        lat: 18.466,\n        lng: -66.118\n      }, {\n        lat: 32.321,\n        lng: -64.757\n      }, {\n        lat: 25.774,\n        lng: -80.190\n      }];\n      return (// Important! Always set the container height explicitly\n        React.createElement(\"div\", {\n          style: {\n            height: '100vh',\n            width: '100%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, React.createElement(GoogleMapReact, {\n          bootstrapURLKeys: {\n            key: 'AIzaSyAVQ-sy1G7aUQWxuTZjNsW0I6IBzcNocmQ'\n          },\n          defaultCenter: this.props.center,\n          defaultZoom: this.props.zoom,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, React.createElement(Polyline, {\n          path: triangleCoords,\n          strokeColor: \"#0000FF\",\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        })))\n      );\n    }\n  }]);\n\n  return SimpleMap;\n}(Component);\n\nSimpleMap.defaultProps = {\n  center: {\n    lat: 59.95,\n    lng: 30.33\n  },\n  zoom: 11\n};\n\nvar Question =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(Question, _Component2);\n\n  function Question(props) {\n    var _this;\n\n    _classCallCheck(this, Question);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Question).call(this, props)); // Default all answers to false\n\n    var answers = [];\n\n    for (var i = 0; i < _this.props.options.length; i++) {\n      answers.push(false);\n    } // Set initial state\n\n\n    _this.state = {\n      answers: answers\n    };\n    return _this;\n  }\n\n  _createClass(Question, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var options = this.props.options.map(function (option, index) {\n        return React.createElement(\"label\", {\n          key: index,\n          className: \"CheckmarkLabel\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, \" \", option, React.createElement(\"input\", {\n          type: _this2.props.type,\n          name: _this2.props.id,\n          onChange: function onChange(e) {\n            // Update answers state\n            var answers = _toConsumableArray(_this2.state.answers);\n\n            answers[index] = e.target.checked;\n\n            _this2.setState({\n              answers: answers\n            }, function () {\n              _this2.props.onAnswerChange(_this2.props.id, _this2.state.answers);\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          className: \"Checkmark type-\" + _this2.props.type,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }));\n      });\n      return React.createElement(\"div\", {\n        className: \"QuestionContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, this.props.id + 1 + '. ' + this.props.question), React.createElement(\"div\", {\n        className: \"CheckboxContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, options));\n    }\n  }]);\n\n  return Question;\n}(Component);\n\nvar Questions =\n/*#__PURE__*/\nfunction (_Component3) {\n  _inherits(Questions, _Component3);\n\n  function Questions(props) {\n    var _this3;\n\n    _classCallCheck(this, Questions);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Questions).call(this, props));\n    _this3.state = {\n      questions: [],\n      answers: []\n    };\n    _this3.handleAnswerChange = _this3.handleAnswerChange.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    _this3.handleSubmit = _this3.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    return _this3;\n  }\n\n  _createClass(Questions, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this4 = this;\n\n      fetch(\"http://localhost:5000/get-questions\").then(function (res) {\n        return res.json();\n      }).then(function (questions) {\n        var answers = [];\n\n        for (var i = 0; i < questions.length; i++) {\n          var q = questions[i];\n          var arr = [];\n\n          for (var _i = 0; _i < q.options.length; _i++) {\n            arr.push(false);\n          }\n\n          answers.push(arr);\n        }\n\n        console.log(questions);\n\n        _this4.setState({\n          questions: questions,\n          answers: answers\n        });\n      });\n    } // Handle answer change by updating the state variable\n\n  }, {\n    key: \"handleAnswerChange\",\n    value: function handleAnswerChange(id, answers) {\n      var a = _toConsumableArray(this.state.answers);\n\n      a[id] = answers;\n      this.setState({\n        answers: a\n      });\n    } // Handle submit of all answers\n\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      // Send POST request to submit-answers route, which returns a guess\n      fetch(\"http://localhost:5000/submit-answers\", {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: \"POST\",\n        body: JSON.stringify(this.state.answers)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (guess) {\n        alert('Guess: ' + guess.state);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var questionEls = this.state.questions.map(function (question, index) {\n        return React.createElement(Question, {\n          id: index,\n          key: index,\n          question: question.question,\n          options: question.options,\n          type: question.type,\n          onAnswerChange: function onAnswerChange(id, answers) {\n            _this5.handleAnswerChange(id, answers);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: \"ContentWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ContentContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, questionEls, React.createElement(\"button\", {\n        onClick: function onClick() {\n          _this5.handleSubmit();\n        },\n        className: \"SubmitButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return Questions;\n}(Component);\n\nvar App =\n/*#__PURE__*/\nfunction (_Component4) {\n  _inherits(App, _Component4);\n\n  function App(props) {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, React.createElement(SimpleMap, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/aidan/Desktop/COMP20 Group Project/frontend/src/App.js"],"names":["React","Component","GoogleMapReact","AnyReactComponent","text","SimpleMap","polys","labels","map","GMap2","document","getElementById","addControl","GLargeMapControl","GMapTypeControl","setCenter","GLatLng","request","GXmlHttp","create","open","onreadystatechange","readyState","xmlDoc","GXml","parse","responseText","states","documentElement","getElementsByTagName","a","length","label","getAttribute","colour","points","pts","i","parseFloat","poly","GPolygon","clickable","push","addOverlay","triangleCoords","lat","lng","height","width","key","props","center","zoom","defaultProps","Question","answers","options","state","option","index","type","id","e","target","checked","setState","onAnswerChange","question","Questions","questions","handleAnswerChange","bind","handleSubmit","fetch","then","res","json","q","arr","console","log","headers","method","body","JSON","stringify","guess","alert","questionEls","App"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport GoogleMapReact from 'google-map-react';\n\n\n\n\nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\n\nclass SimpleMap extends Component {\n\n    componentDidMount() {\n\n\n\n\n        var polys = [];\n             var labels = [];\n\n\n\n\n\n             // Display the map, with some controls and set the initial location\n             var map = new GMap2(document.getElementById(\"map\"));\n             map.addControl(new GLargeMapControl());\n             map.addControl(new GMapTypeControl());\n             map.setCenter(new GLatLng(42.16,-100.72),4);\n\n\n\n             // Read the data from states.xml\n\n             var request = GXmlHttp.create();\n             request.open(\"GET\", \"states.xml\", true);\n             request.onreadystatechange = function() {\n               if (request.readyState == 4) {\n                 var xmlDoc = GXml.parse(request.responseText);\n\n                 // ========= Now process the polylines ===========\n                 var states = xmlDoc.documentElement.getElementsByTagName(\"state\");\n\n                 // read each line\n                 for (var a = 0; a < states.length; a++) {\n                   // get any state attributes\n                   var label  = states[a].getAttribute(\"name\");\n                   var colour = states[a].getAttribute(\"colour\");\n                   // read each point on that line\n                   var points = states[a].getElementsByTagName(\"point\");\n                   var pts = [];\n                   for (var i = 0; i < points.length; i++) {\n                      pts[i] = new GLatLng(parseFloat(points[i].getAttribute(\"lat\")),\n                                          parseFloat(points[i].getAttribute(\"lng\")));\n                   }\n                   var poly = new GPolygon(pts,\"#000000\",1,1,colour,0.5,{clickable:false});\n                   polys.push(poly);\n                   labels.push(label);\n                   map.addOverlay(poly);\n                 }\n                 // ================================================\n               }\n           }\n\n\n\n\n\n\n    }\n\n  static defaultProps = {\n    center: {\n      lat: 59.95,\n      lng: 30.33\n    },\n    zoom: 11\n  };\n\n  render() {\n\n      const triangleCoords = [\n          {lat: 25.774, lng: -80.190},\n          {lat: 18.466, lng: -66.118},\n          {lat: 32.321, lng: -64.757},\n          {lat: 25.774, lng: -80.190}\n        ];\n\n    return (\n      // Important! Always set the container height explicitly\n      <div style={{ height: '100vh', width: '100%' }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: 'AIzaSyAVQ-sy1G7aUQWxuTZjNsW0I6IBzcNocmQ' }}\n          defaultCenter={this.props.center}\n          defaultZoom={this.props.zoom}\n        >\n        <Polyline\n          path={triangleCoords}\n          strokeColor=\"#0000FF\"\n          strokeOpacity={0.8}\n          strokeWeight={2} />\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n\n\n\n\nclass Question extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // Default all answers to false\n        let answers = [];\n        for (let i = 0; i < this.props.options.length; i++) {\n            answers.push(false);\n        }\n\n        // Set initial state\n        this.state = {\n            answers: answers\n        }\n    }\n\n\n    render() {\n\n        const options = this.props.options.map((option, index) =>\n            <label\n                key={index}\n                className=\"CheckmarkLabel\"\n            > {option}\n                <input\n                    type={this.props.type}\n                    name={this.props.id}\n                    onChange={(e) => {\n                        // Update answers state\n                        let answers = [...this.state.answers];\n                        answers[index] = e.target.checked;\n                        this.setState({answers: answers}, () => {\n                            this.props.onAnswerChange(this.props.id, this.state.answers);\n                        });\n                    }}\n                ></input>\n                <span className={\"Checkmark type-\" + this.props.type}></span>\n            </label>\n        );\n\n        return (\n            <div className=\"QuestionContainer\">\n                <h1>{(this.props.id + 1) + '. ' +this.props.question}</h1>\n                <div className=\"CheckboxContainer\">\n                    {options}\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\nclass Questions extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            questions: [],\n            answers: [],\n        }\n\n        this.handleAnswerChange = this.handleAnswerChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentWillMount() {\n        fetch(\"http://localhost:5000/get-questions\")\n        .then(res => res.json())\n        .then(\n            (questions) => {\n                let answers = [];\n                for (let i = 0; i < questions.length; i++) {\n                    const q = questions[i];\n                    let arr = [];\n                    for (let i = 0; i < q.options.length; i++) {\n                        arr.push(false);\n                    }\n                    answers.push(arr);\n                }\n                console.log(questions);\n                this.setState({\n                    questions: questions,\n                    answers: answers,\n                });\n            }\n        );\n    }\n\n    // Handle answer change by updating the state variable\n    handleAnswerChange(id, answers) {\n        let a = [...this.state.answers];\n        a[id] = answers;\n        this.setState({\n            answers: a,\n        });\n    }\n\n    // Handle submit of all answers\n    handleSubmit() {\n        // Send POST request to submit-answers route, which returns a guess\n        fetch(\"http://localhost:5000/submit-answers\",\n        {\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            method: \"POST\",\n            body: JSON.stringify(this.state.answers)\n        })\n        .then(res => res.json())\n        .then(\n            (guess) => {\n                alert('Guess: ' + guess.state);\n            }\n        );\n    }\n\n    render() {\n\n        const questionEls = this.state.questions.map((question, index) =>\n            <Question\n                id={index}\n                key={index}\n                question={question.question}\n                options={question.options}\n                type={question.type}\n                onAnswerChange={(id, answers) => {\n                    this.handleAnswerChange(id, answers);\n                }}\n            />\n        );\n\n        return (\n            <div className=\"ContentWrapper\">\n                <div className=\"ContentContainer\">\n                    {questionEls}\n                    <button\n                        onClick={() => {\n                            this.handleSubmit();\n                        }}\n                        className=\"SubmitButton\">\n                        Submit\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                {/*<Questions />*/}\n                <SimpleMap />\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}